// rsa_test.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <stdint.h>

#include <openssl/bio.h>
#include <openssl/err.h>
#include <openssl/rsa.h>
#include <openssl/evp.h>
#include <openssl/pem.h>
#include <openssl/applink.c>


#define RSA_MAX_LEN (1024/8)


const unsigned char private1024e3[]={
0x76,0x61,0xBA,0x8B,0xDB,0x5F,0x87,0x46,
0x52,0xBD,0x96,0x91,0xDC,0x57,0x14,0x25,
0x32,0x58,0xCF,0x32,0x76,0x7B,0xF5,0x09,
0x49,0x93,0x82,0x0B,0x63,0x0E,0x4C,0xFC,
0x8B,0x8E,0x41,0x61,0xCC,0x0D,0xA8,0x32,
0xC0,0xB1,0xC0,0x13,0x6C,0xC7,0xA6,0x95,
0x09,0x6B,0xE4,0x54,0xA2,0x29,0x37,0x9C,
0x2C,0xE2,0x53,0x03,0x3B,0x9E,0xEB,0x49,
0x3C,0x49,0x19,0x31,0x77,0xC4,0xC0,0x82,
0x46,0x26,0x2A,0x17,0x34,0x73,0x3D,0xA8,
0xC7,0x46,0x64,0xDF,0x9C,0x4B,0x1B,0xC2,
0xCA,0x74,0x01,0x94,0x26,0x53,0x3F,0x1B,
0x02,0xE3,0x85,0xC3,0x5D,0xCE,0x0B,0xE0,
0x57,0xBE,0xB9,0xCD,0x18,0xB7,0x74,0x0D,
0x30,0x7C,0x85,0x6A,0x89,0xFF,0xCB,0x61,
0x4E,0xBA,0xFD,0x7A,0x7F,0x41,0x55,0x0B};
const unsigned char public1024e3[]={
0xB1,0x92,0x97,0xD1,0xC9,0x0F,0x4A,0xE9,
0x7C,0x1C,0x61,0xDA,0xCA,0x82,0x9E,0x37,
0xCB,0x85,0x36,0xCB,0xB1,0xB9,0xEF,0x8D,
0xEE,0x5D,0x43,0x11,0x14,0x95,0x73,0x7A,
0xD1,0x55,0x62,0x12,0xB2,0x14,0x7C,0x4C,
0x21,0x0A,0xA0,0x1D,0x23,0x2B,0x79,0xDF,
0x8E,0x21,0xD6,0x7E,0xF3,0x3D,0xD3,0x6A,
0x43,0x53,0x7C,0x84,0xD9,0x6E,0x60,0xEF,
0x85,0x35,0xF8,0xBD,0x02,0x2B,0xEB,0xB3,
0x68,0x2F,0x84,0xF9,0xA3,0x58,0x13,0x1C,
0x8D,0xE4,0xD6,0xAE,0x56,0x17,0xED,0x28,
0x65,0x2A,0x15,0x05,0x54,0x83,0xF9,0x7F,
0x18,0x77,0x00,0x9A,0x2D,0x05,0x99,0x20,
0x55,0xBD,0x59,0x54,0x5A,0xBF,0x9E,0x05,
0x10,0x72,0x47,0xF8,0x6E,0x03,0xDB,0xE2,
0x3A,0x55,0x41,0x6B,0x4B,0xF0,0xEE,0x67};
RSA test;

int main(int argc, char *argv[])
{
	uint8_t	plaintext[RSA_MAX_LEN];
	/*
	uint8_t	cyphertext[RSA_MAX_LEN] = { 0x6e,0x33,0x2b,0xfa,0x96,0x4a,0xef,0x59,0x23,0xa5,0x6a,0xf0,0x10,0x11,0x48,0x3e,0xdf,0xd7,0x45,0xa6,0x33,0x15,0x36,0x59,
										0xe9,0x94,0x52,0x32,0xd9,0x1f,0x21,0xb2,0x55,0x32,0xa5,0x1d,0x1f,0xf8,0x5f,0x73,0x34,0xf9,0xd4,0x91,0x58,0x16,0x98,0xb6,
										0xb9,0x8f,0x2f,0x20,0x80,0x0b,0x0b,0x9c,0x16,0x89,0x31,0xbd,0xb6,0x9f,0x80,0xba,0xd5,0xee,0x45,0x47,0x13,0xbb,0xb3,0x68,
										0x6d,0xda,0x77,0x28,0x61,0xc7,0xe1,0x2b,0x6b,0xc1,0x61,0x76,0x87,0x81,0x5b,0xc5,0x0e,0x5f,0xb0,0x99,0xb7,0xda,0x44,0xa5,
										0xb7,0xad,0x43,0x8b,0xd5,0xe9,0x09,0x03,0xa8,0x57,0xd6,0x8e,0x27,0x28,0x6a,0x76,0x46,0x8e,0x48,0x03,0x65,0x8b,0xa3,0x5a,
										0x7b,0xa9,0x4e,0xa4,0x2c,0x39,0x71,0x10 };
	*/
	uint8_t	cyphertext[RSA_MAX_LEN] = { 0x4a,0x0a,0xce,0x26,0x05,0x0d,0xb9,0x84,0x75,0x74,0x07,0x2d,0x4f,0x16,0x21,0xf6,0x24,0xb3,0x68,0x25,0xe3,0xa9,0xaf,0x51,
										0x4c,0x86,0xc8,0xc5,0xeb,0x1d,0xa9,0x78,0x46,0xed,0x7e,0x74,0xd8,0x48,0xc7,0x1b,0x37,0x69,0x77,0xf9,0xb2,0xae,0x44,0xd4,
										0x5d,0xa8,0x16,0xae,0xb0,0x08,0x4f,0xf2,0x57,0x68,0x7b,0x5e,0xae,0x50,0x00,0x2e,0x85,0xb5,0xd3,0xce,0x49,0x68,0xa0,0xd5,
										0x70,0x1b,0xc8,0x4d,0x03,0x1f,0x18,0x54,0xa1,0x85,0x11,0xe3,0x91,0x88,0x26,0x77,0x0b,0xaf,0x2d,0xd6,0xe6,0x78,0x30,0x9b,
										0x6f,0x34,0xf2,0x2f,0xd1,0x74,0x99,0x3f,0x71,0x55,0xdb,0x46,0x29,0x8e,0x60,0xfb,0xb6,0xd5,0xdf,0x34,0x47,0x99,0x41,0xf3,
										0x9c,0xc6,0x31,0xcc,0x42,0x6c,0x48,0xc5 };
	
	int len;

	RSA	*rsa;
	EVP_PKEY	*prikey, *pubkey;
	FILE *fp;

	rsa = RSA_new();
	//prikey = EVP_PKEY_new();
	//pubkey = EVP_PKEY_new();


	prikey = NULL;
	fp = fopen("private.pem", "r");
	prikey = PEM_read_PrivateKey(fp, NULL, NULL, NULL);
	fclose(fp);
	if (prikey == NULL)
	{
		printf("Unable to open private.pem\n");
		return 1;
	}

	pubkey = NULL;
	fp = fopen("public.pem", "r");
	pubkey = PEM_read_PUBKEY(fp, NULL, NULL, NULL);
	fclose(fp);
	if (pubkey == NULL)
	{
		printf("Unable to open public.pem\n");
		return 1;
	}

	EVP_PKEY_assign_RSA(prikey, rsa);

	
	
	rsa = NULL;
	fp = fopen("private.pem", "r");
	rsa = PEM_read_RSAPrivateKey(fp, NULL, NULL, NULL);
	fclose(fp);
	if (rsa == NULL)
	{
		printf("Unable to open RSA key\n");
		return 1;
	}



	len = RSA_private_decrypt(RSA_MAX_LEN, cyphertext, plaintext, rsa, RSA_NO_PADDING);
	//len = RSA_public_decrypt(RSA_MAX_LEN, cyphertext, plaintext, rsa, RSA_NO_PADDING);
	printf("Len: %u\n", len);
	
	for (int i = 0; i < RSA_MAX_LEN; i++)
		printf("%02X ", plaintext[i]);
	printf("\n");

	return 0;
}
